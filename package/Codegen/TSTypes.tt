<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
**************************************************************/

import type {
<# foreach (var type in Types.Where(t => Util.HasCtor(t) && Util.GetTSNamespace(t) == "")) { #>
    <#= Util.GetNativePropsName(type) #>,
<# } #>
} from './Props';

<# foreach (var ns in Types.Where(t => Util.HasCtor(t) && Util.GetTSNamespace(t) != "").Select(t => Util.GetTSNamespace(t)).Distinct()) { #>
import type { Native<#= ns #> } from './Props';
<# } #>

import React from 'react';
import { NativeXamlControl } from './NativeXamlControl';
import { findNodeHandle, UIManager } from 'react-native';

import type { Point } from './Props';

const xamlCommands = UIManager.getViewManagerConfig('XamlControl').Commands;

<# 
foreach (var type in Types.Where(t => Util.HasCtor(t))) { 
var ns = Util.GetTSNamespace(type);
if (ns != "") { #>
export namespace <#= ns #> {
<# } #>
export type <#= Util.ToJsName(type) #>Props = Omit<<#= Util.GetNativePropsName(type) #>, 'type'>;

export class <#= Util.ToJsName(type) #> extends React.Component<<#= Util.ToJsName(type) #>Props> {
  render() {
    return <NativeXamlControl {...this.props} type='<#= type.GetFullName() #>' />;
  }
<# foreach (var command in Util.GetCommands(type.GetFullName())) { #>
  static <#= command.Name #>(ref: React.MutableRefObject<<#= Util.ToJsName(type) #>>, args: <#= command.TSArgTypes != null ? command.TSArgTypes : "any[]" #>) {
    const tag = findNodeHandle(ref.current);
    UIManager.dispatchViewManagerCommand(tag, xamlCommands.<#= command.Name #>, <#= command.TSArgTypes != null ? "[args]" : "args" #>);
  }
<# } #>
};
<# if (ns != "") { #>
}
<# } #>
<# } #>
